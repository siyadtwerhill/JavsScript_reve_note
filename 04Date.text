// Here are **detailed notes** about **Dates in JavaScript**:  

// ---

// # **JavaScript Date Object**
// JavaScript provides a built-in `Date` object to work with dates and times.  

// ## **1. Creating a Date Object**
// There are multiple ways to create a `Date` object in JavaScript:

// ### **1.1 Creating the current date and time**
// ```js
// let now = new Date();
// console.log(now); // Current date and time
// ```
// - This creates a `Date` object with the **current date and time** (based on the system time).

// ### **1.2 Creating a specific date**
// ```js
// let specificDate = new Date("2023-12-31"); 
// console.log(specificDate); // Sun Dec 31 2023 00:00:00 GMT+0000 (UTC)
// ```
// - This creates a date from a **string format** (YYYY-MM-DD).

// ### **1.3 Using year, month, day, hours, minutes, seconds, milliseconds**
// ```js
// let date = new Date(2023, 11, 31, 23, 59, 59, 999);
// console.log(date); // Sun Dec 31 2023 23:59:59 GMT+0000 (UTC)
// ```
// - **Note**: **Months are zero-based** (0 = January, 11 = December).

// ### **1.4 Using timestamp (milliseconds since 1970)**
// ```js
// let dateFromTimestamp = new Date(1700000000000);
// console.log(dateFromTimestamp); // Fri Nov 14 2023 02:40:00 GMT+0000 (UTC)
// ```
// - JavaScript counts time from **January 1, 1970 (Unix Epoch Time)**.

// ---

// ## **2. Getting Date Components**
// JavaScript provides various methods to get parts of a date:

// | **Method**              | **Description**                     | **Example Output** |
// |-------------------------|-------------------------------------|-------------------|
// | `getFullYear()`        | Get the **year**                    | `2023` |
// | `getMonth()`           | Get the **month** (0-11)            | `0` (January) |
// | `getDate()`            | Get the **day** of the month (1-31) | `15` |
// | `getDay()`             | Get the **weekday** (0-6)           | `2` (Tuesday) |
// | `getHours()`           | Get the **hour** (0-23)             | `14` |
// | `getMinutes()`         | Get the **minutes** (0-59)          | `30` |
// | `getSeconds()`         | Get the **seconds** (0-59)          | `45` |
// | `getMilliseconds()`    | Get the **milliseconds** (0-999)    | `500` |
// | `getTime()`            | Get **timestamp** (ms since 1970)   | `1700000000000` |

// ### **Example: Getting date components**
// ```js
// let today = new Date();
// console.log(today.getFullYear()); // 2025
// console.log(today.getMonth());    // 0 (January)
// console.log(today.getDate());     // 31 (Day of the month)
// console.log(today.getDay());      // 3 (Wednesday)
// console.log(today.getHours());    // 14 (2 PM)
// console.log(today.getMinutes());  // 45
// console.log(today.getSeconds());  // 30
// ```
// ---

// ## **3. Setting Date Components**
// JavaScript allows modifying parts of a date object.

// | **Method**               | **Description** |
// |--------------------------|----------------|
// | `setFullYear(year)`      | Set year |
// | `setMonth(month)`        | Set month (0-11) |
// | `setDate(day)`           | Set day of month (1-31) |
// | `setHours(hours)`        | Set hours (0-23) |
// | `setMinutes(minutes)`    | Set minutes (0-59) |
// | `setSeconds(seconds)`    | Set seconds (0-59) |
// | `setMilliseconds(ms)`    | Set milliseconds (0-999) |

// ### **Example: Modifying a date**
// ```js
// let date = new Date();
// date.setFullYear(2030);
// date.setMonth(11); // December
// date.setDate(25);
// console.log(date); // Tue Dec 25 2030
// ```

// ---

// ## **4. Formatting Dates**
// JavaScript provides different ways to format dates.

// ### **4.1 `toDateString()`**
// ```js
// let date = new Date();
// console.log(date.toDateString()); // "Tue Jan 31 2025"
// ```

// ### **4.2 `toTimeString()`**
// ```js
// console.log(date.toTimeString()); // "14:45:30 GMT+0000 (UTC)"
// ```

// ### **4.3 `toISOString()` (ISO 8601 format)**
// ```js
// console.log(date.toISOString()); // "2025-01-31T14:45:30.000Z"
// ```

// ### **4.4 `toLocaleDateString()` (Localized date format)**
// ```js
// console.log(date.toLocaleDateString("en-US")); // "1/31/2025"
// console.log(date.toLocaleDateString("fr-FR")); // "31/01/2025"
// ```

// ### **4.5 `toLocaleTimeString()` (Localized time format)**
// ```js
// console.log(date.toLocaleTimeString("en-US")); // "2:45:30 PM"
// console.log(date.toLocaleTimeString("de-DE")); // "14:45:30"
// ```

// ---

// ## **5. Comparing Dates**
// ### **5.1 Checking if one date is before/after another**
// ```js
// let date1 = new Date("2024-01-01");
// let date2 = new Date("2025-01-01");

// console.log(date1 < date2); // true (2024 is before 2025)
// console.log(date1 > date2); // false
// ```

// ### **5.2 Checking if two dates are the same**
// ```js
// let d1 = new Date("2025-01-31");
// let d2 = new Date("2025-01-31");

// console.log(d1.getTime() === d2.getTime()); // true (same timestamp)
// ```
// - **Note**: You **cannot** compare two dates using `===` or `==` because they are objects.

// ---

// ## **6. Calculating Date Differences**
// ### **Example: Finding the difference between two dates**
// ```js
// let start = new Date("2025-01-01");
// let end = new Date("2025-12-31");

// let difference = end.getTime() - start.getTime(); // Milliseconds
// let daysDiff = difference / (1000 * 60 * 60 * 24); // Convert to days

// console.log(daysDiff); // 364 days
// ```

// ---

// ## **7. Getting the Current Timestamp**
// ### **Using `Date.now()`**
// ```js
// console.log(Date.now()); // Returns milliseconds since 1970
// ```

// ---

// ## **8. Adding or Subtracting Time**
// ### **Example: Adding days**
// ```js
// let date = new Date();
// date.setDate(date.getDate() + 10); // Add 10 days
// console.log(date);
// ```

// ### **Example: Subtracting hours**
// ```js
// date.setHours(date.getHours() - 5); // Subtract 5 hours
// console.log(date);
// ```

// ---

// ## **9. Converting Timestamp to Date**
// ```js
// let timestamp = 1700000000000;
// let date = new Date(timestamp);
// console.log(date); // Fri Nov 14 2023
// ```

// ---

// ## **10. Working with UTC Dates**
// JavaScript provides methods to work with UTC (Universal Coordinated Time).

// | **Method**               | **Description** |
// |--------------------------|----------------|
// | `getUTCFullYear()`       | Get UTC year |
// | `getUTCMonth()`          | Get UTC month |
// | `getUTCDate()`           | Get UTC day |
// | `getUTCHours()`          | Get UTC hours |
// | `toUTCString()`          | Convert date to UTC string |

// ```js
// let date = new Date();
// console.log(date.toUTCString()); // "Fri, 31 Jan 2025 14:45:30 GMT"
// ```

// ---

// ## **Conclusion**
// - The `Date` object in JavaScript allows for **date creation, manipulation, formatting, and comparison**.
// - Use `get` and `set` methods to retrieve or modify parts of a date.
// - Use `toLocaleDateString()` and `toISOString()` for different formats.
// - Use `getTime()` to compare dates.

// Would you like some **challenges** to practice Date operations? ðŸš€